"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor-community_camera-preview_dist_esm_web_js"],{

/***/ 1666:
/*!**************************************************************************!*\
  !*** ./node_modules/@capacitor-community/camera-preview/dist/esm/web.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CameraPreviewWeb": () => (/* binding */ CameraPreviewWeb),
/* harmony export */   "CameraPreview": () => (/* binding */ CameraPreview)
/* harmony export */ });
/* harmony import */ var _Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 6549);


class CameraPreviewWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super({
      name: "CameraPreview",
      platforms: ["web"]
    });
  }

  start(options) {
    var _this = this;

    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise( /*#__PURE__*/function () {
        var _ref = (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (resolve, reject) {
          yield navigator.mediaDevices.getUserMedia({
            audio: !options.disableAudio,
            video: true
          }).then(stream => {
            // Stop any existing stream so we can request media with different constraints based on user input
            stream.getTracks().forEach(track => track.stop());
          }).catch(error => {
            reject(error);
          });
          const video = document.getElementById("video");
          const parent = document.getElementById(options.parent);

          if (!video) {
            const videoElement = document.createElement("video");
            videoElement.id = "video";
            videoElement.setAttribute("class", options.className || ""); // Don't flip video feed if camera is rear facing

            if (options.position !== 'rear') {
              videoElement.setAttribute("style", "-webkit-transform: scaleX(-1); transform: scaleX(-1);");
            }

            const userAgent = navigator.userAgent.toLowerCase();
            const isSafari = userAgent.includes('safari') && !userAgent.includes('chrome'); // Safari on iOS needs to have the autoplay, muted and playsinline attributes set for video.play() to be successful
            // Without these attributes videoElement.play() will throw a NotAllowedError
            // https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari

            if (isSafari) {
              videoElement.setAttribute('autoplay', 'true');
              videoElement.setAttribute('muted', 'true');
              videoElement.setAttribute('playsinline', 'true');
            }

            parent.appendChild(videoElement);

            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
              const constraints = {
                video: true
              };

              if (options.position === 'rear') {
                constraints.video = {
                  facingMode: 'environment'
                };
                _this.isBackCamera = true;
              } else {
                _this.isBackCamera = false;
              }

              navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
                //video.src = window.URL.createObjectURL(stream);
                videoElement.srcObject = stream;
                videoElement.play();
                resolve({});
              }, err => {
                reject(err);
              });
            }
          } else {
            reject({
              message: "camera already started"
            });
          }
        });

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    })();
  }

  stop() {
    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const video = document.getElementById("video");

      if (video) {
        video.pause();
        const st = video.srcObject;
        const tracks = st.getTracks();

        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
          track.stop();
        }

        video.remove();
      }
    })();
  }

  capture(_options) {
    var _this2 = this;

    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise((resolve, _) => {
        const video = document.getElementById("video");
        const canvas = document.createElement("canvas"); // video.width = video.offsetWidth;

        const context = canvas.getContext("2d");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight; // flip horizontally back camera isn't used

        if (!_this2.isBackCamera) {
          context.translate(video.videoWidth, 0);
          context.scale(-1, 1);
        }

        context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
        resolve({
          value: canvas.toDataURL("image/png").replace("data:image/png;base64,", "")
        });
      });
    })();
  }

  captureSample(_options) {
    var _this3 = this;

    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this3.capture(_options);
    })();
  }

  getSupportedFlashModes() {
    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      throw new Error('getSupportedFlashModes not supported under the web platform');
    })();
  }

  setFlashMode(_options) {
    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      throw new Error('setFlashMode not supported under the web platform');
    })();
  }

  flip() {
    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      throw new Error('flip not supported under the web platform');
    })();
  }

  setOpacity(_options) {
    return (0,_Users_matteomuller_Desktop_APPIDEE_SharedGallery_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const video = document.getElementById("video");

      if (!!video && !!_options['opacity']) {
        video.style.setProperty("opacity", _options['opacity'].toString());
      }
    })();
  }

}
const CameraPreview = new CameraPreviewWeb();


(0,_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.registerWebPlugin)(CameraPreview);

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-community_camera-preview_dist_esm_web_js.js.map